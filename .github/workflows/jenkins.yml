name: Build and Deploy Custom Jenkins Plugin

on:
  push:
    branches: [ master ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - 'Dockerfile'
      - '.github/workflows/jenkins.yml'
  workflow_dispatch:    

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE: owolabialiu/my-jenkins-custom-git
  HELM_CHART_PATH: helm-charts/charts/jenkins
  NAMESPACE: jenkins

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build plugin (skip tests)
      run: mvn clean package -DskipTests

    - name: Upload plugin artifact
      uses: actions/upload-artifact@v4
      with:
        name: jenkins-plugin
        path: target/my-custom-git-plugin.hpi
        retention-days: 7

  build-and-push-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download plugin artifact
      uses: actions/download-artifact@v4
      with:
        name: jenkins-plugin
        path: target/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: target
        file: target/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-kubernetes:
    needs: [build-and-test, build-and-push-image]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: '1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Extract image tag
      id: extract-tag
      run: |
        # Extract the main tag (first one) from the multi-line tags output
        TAG=$(echo "${{ needs.build-and-push-image.outputs.image-tag }}" | head -n1 | cut -d':' -f2)
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Deploy to Kubernetes
      working-directory: ${{ env.HELM_CHART_PATH }}
      run: |
        helm upgrade my-jenkins . \
          --namespace ${{ env.NAMESPACE }} \
          --values values.yaml \
          --set controller.image.tag=${{ steps.extract-tag.outputs.tag }} \
          --set controller.image.pullPolicy=Always \
          --wait \
          --timeout=10m

    - name: Verify deployment
      run: |
        kubectl get pods -n ${{ env.NAMESPACE }} -l app.kubernetes.io/component=jenkins-controller
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=jenkins-controller -n ${{ env.NAMESPACE }} --timeout=300s

    - name: Get Jenkins URL
      run: |
        echo "Jenkins is deployed and ready!"
        echo "You can access it by running:"
        echo "kubectl port-forward svc/my-jenkins 8080:8080 -n ${{ env.NAMESPACE }}"

  security-scan:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push-image.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
