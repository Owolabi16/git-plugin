name: Build and Deploy Jenkins

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: owolabialiu/my-jenkins-custom-git
  KUBERNETES_NAMESPACE: jenkins

jobs:
  build-and-deploy:
    name: Build Plugin, Docker Image, and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
        
    - name: Build plugin
      run: |
        mvn --batch-mode --errors --fail-at-end --show-version --settings .github/workflows/settings.xml clean package -DskipTests
        
    - name: Debug - List generated files
      run: |
        find . -name "*.hpi" -o -name "*.jpi"
        ls -la target/ || echo "No target directory"
        
    - name: Prepare plugin for Docker
      run: |
        mkdir -p docker-context
        # Look for .hpi files in target directory
        if [ -f target/*.hpi ]; then
          cp target/*.hpi docker-context/my-custom-git-plugin.jpi
        else
          echo "No .hpi file found in target/"
          find . -name "*.hpi" -exec cp {} docker-context/my-custom-git-plugin.jpi \;
        fi
        ls -la docker-context/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'
        
    - name: Configure kubectl
      uses: azure/k8s-set-context@v4
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
        
    - name: Deploy with Helm
      run: |
        helm upgrade --install my-jenkins ./helm \
          --namespace ${{ env.KUBERNETES_NAMESPACE }} \
          --create-namespace \
          --set controller.image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set controller.image.tag=${{ github.sha }} \
          --set controller.image.pullPolicy=Always \
          --set controller.installPlugins=false \
          --wait --timeout=10m
          
    - name: Verify deployment
      run: |
        kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }}
        kubectl get svc -n ${{ env.KUBERNETES_NAMESPACE }}