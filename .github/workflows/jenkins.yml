name: Jenkins Plugin CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: owolabialiu/my-jenkins-custom-git
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false

jobs:
  test:
    name: Test Plugin
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run tests
      run: mvn clean test
    
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

  build:
    name: Build Plugin
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Extract version
      id: version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Build plugin
      run: mvn clean package -DskipTests
    
    - name: Verify plugin structure
      run: |
        echo "Checking plugin file..."
        ls -la target/*.hpi
        echo "Verifying manifest..."
        unzip -q -c target/my-custom-git-plugin.hpi META-INF/MANIFEST.MF | head -20
    
    - name: Upload plugin artifact
      uses: actions/upload-artifact@v4
      with:
        name: jenkins-plugin
        path: target/my-custom-git-plugin.hpi
        retention-days: 30

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download plugin artifact
      uses: actions/download-artifact@v4
      with:
        name: jenkins-plugin
        path: target/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
    
    - name: Create Dockerfile
      run: |
        cd target
        cat > Dockerfile << 'EOF'
        FROM jenkins/jenkins:lts
        
        # Switch to root to install dependencies
        USER root
        
        # Copy the custom git plugin and rename it with .jpi extension
        COPY my-custom-git-plugin.hpi /usr/share/jenkins/ref/plugins/my-custom-git-plugin.jpi
        
        # Install required dependencies
        RUN jenkins-plugin-cli --plugins \
            workflow-scm-step \
            workflow-step-api \
            credentials-binding \
            credentials \
            git-client \
            mailer \
            scm-api \
            script-security \
            ssh-credentials \
            structs
        
        # Switch back to jenkins user
        USER jenkins
        
        # Skip the setup wizard
        ENV JAVA_OPTS="-Djenkins.install.runSetupWizard=false"
        EOF
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: target/
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
    
    - name: Deploy to staging
      run: |
        cd helm-charts/charts/jenkins
        helm upgrade --install jenkins-staging . \
          --namespace jenkins-staging \
          --create-namespace \
          --set controller.image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set controller.image.tag=develop \
          --set controller.image.pullPolicy=Always \
          --set controller.installPlugins=false \
          --wait --timeout=10m
    
    - name: Verify deployment
      run: |
        kubectl get pods -n jenkins-staging
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=jenkins-staging -n jenkins-staging --timeout=300s

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
    
    - name: Extract tag version
      id: tag
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Deploy to production
      run: |
        cd helm-charts/charts/jenkins
        helm upgrade --install jenkins-production . \
          --namespace jenkins-production \
          --create-namespace \
          --set controller.image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set controller.image.tag=${{ steps.tag.outputs.version }} \
          --set controller.image.pullPolicy=Always \
          --set controller.installPlugins=false \
          --wait --timeout=15m
    
    - name: Verify production deployment
      run: |
        kubectl get pods -n jenkins-production
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=jenkins-production -n jenkins-production --timeout=300s